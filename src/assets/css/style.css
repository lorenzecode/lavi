body {
    font-family: 'Quicksand', sans-serif;
    --tw-text-opacity: 1;
    color: rgba(90, 54, 59, var(--tw-text-opacity))
}

.text-fluid-2xl {
    font-size: clamp(2rem, calc(60/1536*100vw), 3.75rem)
}

.logo {
    max-width: 220px
}

.l-embla {
    overflow: hidden;
    position: relative
}

.l-embla-viewport.is-draggable {
    cursor: move;
    cursor: grab
}

.l-embla-viewport.is-dragging {
    cursor: grabbing
}

#l-menu .l-embla-wrapper,
.l-embla-wrapper {
    display: flex;
    align-items: center
}

#l-menu a.active {
    border-bottom: 1px solid
}

#l-services,
#l-slide {
    width: 100%
}

#l-slide .l-embla-viewport {
    overflow: hidden;
    width: 100%
}

#l-slide .l-embla-wrapper {
    margin-left: -16px
}

#l-slide .l-embla-content {
    flex: 0 0 auto;
    width: 80%;
    max-width: 1550px;
    height: clamp(300px, calc(600/1536*100vw), 60vh);
    padding-left: 16px;
    position: relative;
    overflow: hidden
}

#l-services .l-embla-content img,
#l-slide .l-embla-content img {
    width: 100%;
    object-fit: cover
}

.l-embla-btn {
    outline: 0;
    cursor: pointer;
    touch-action: manipulation;
    position: absolute;
    z-index: 1;
    top: 50%;
    transform: translateY(-50%);
    border: 0;
    width: 50px;
    height: 50px;
    justify-content: center;
    align-items: center;
    fill: #fbf8f8;
    padding: 10px;
    border-radius: 9999px;
    border-width: 2px;
    border-style: solid;
    --tw-border-opacity: 1;
    border-color: rgba(251, 248, 248, var(--tw-border-opacity));
    --tw-bg-opacity: 1;
    background-color: rgba(183, 110, 121, var(--tw-bg-opacity));
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: rgba(183, 110, 121, var(--tw-ring-opacity));
    transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    transition-duration: 150ms
}

.l-embla-btn:hover {
    --tw-bg-opacity: 1;
    background-color: rgba(165, 99, 109, var(--tw-bg-opacity))
}

.l-embla-btn:disabled {
    cursor: default;
    opacity: 0
}

.l-embla-btn-svg {
    width: 100%;
    height: 100%
}

.l-embla-btn-prev {
    left: 27px
}

.l-embla-btn-next {
    right: 27px
}

.l-embla-dots {
    display: flex;
    list-style: none;
    justify-content: center;
    padding-top: 10px
}

.l-embla-dot {
    background-color: transparent;
    cursor: pointer;
    position: relative;
    padding: 0;
    outline: 0;
    border: 0;
    width: 30px;
    height: 30px;
    margin-right: 7.5px;
    margin-left: 7.5px;
    display: flex;
    align-items: center
}

.l-embla-dot:hover:after {
    background-color: #b76e79
}

.l-embla-dot:after {
    transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    transition-duration: 150ms;
    background-color: #eddbde;
    width: 100%;
    height: 4px;
    border-radius: 4px;
    content: ''
}

.l-embla-dot.is-selected:after {
    background-color: #b76e79;
    opacity: 1
}

.equilibrium::after,
.equilibrium::before {
    content: '';
    position: absolute;
    --tw-bg-opacity: 1
}

.equilibrium::before {
    top: 50%;
    left: 50%;
    z-index: 10;
    height: 10rem;
    width: 10rem;
    --tw-translate-x: 0;
    --tw-translate-y: 0;
    --tw-rotate: 0;
    --tw-skew-x: 0;
    --tw-skew-y: 0;
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-translate-x: -50%;
    --tw-translate-y: -50%;
    border-radius: 9999px;
    border-width: 1px;
    border-style: solid;
    --tw-border-opacity: 1;
    border-color: rgba(237, 219, 222, var(--tw-border-opacity));
    background-color: rgba(255, 255, 255, var(--tw-bg-opacity))
}

.equilibrium::after {
    z-index: 0;
    height: 100%;
    width: 1px;
    background-color: rgba(237, 219, 222, var(--tw-bg-opacity))
}

#l-services .l-embla-viewport {
    overflow: hidden;
    width: 100%;
    padding-right: 16px
}

#l-services .l-embla-wrapper {
    margin-left: -16px
}

#l-services .l-embla-content {
    padding-left: 16px;
    flex: 0 0 auto;
    width: 90%;
    max-width: 360px;
    height: clamp(340px, calc(600/1536*100vw), 480px);
    transition: max-width .2s
}

#main-carousel .l-embla-viewport {
    overflow: hidden;
    width: 100%
}

#main-carousel .l-embla-wrapper {
    display: flex;
    margin-left: -8px
}

#main-carousel .l-embla-content {
    padding-left: 8px;
    flex: 0 0 auto;
    width: 100%;
    height: clamp(340px, calc(600/1536*100vw), 600px)
}

#thumb-carousel .l-embla-wrapper {
    cursor: default;
    padding-top: 8px;
    margin-left: -8px
}

#thumb-carousel .l-embla-content {
    padding-left: 8px;
    min-width: 25%
}

#thumb-carousel .l-embla-content img {
    opacity: .4;
    transition: opacity .2s
}

#thumb-carousel .is-selected img {
    opacity: 1
}

@media (min-width:480px) {
    #thumb-carousel .l-embla-content {
        min-width: 20%
    }
}

@media (min-width:640px) {
    #l-slide .l-embla-content {
        height: clamp(380px, calc(600/1536*100vw), 60vh)
    }

    .equilibrium::after::after,
    .equilibrium::before::before {
        content: none
    }

    .equilibrium svg {
        position: initial
    }
}

@media (min-width:768px) {
    #l-menu .l-embla-wrapper {
        justify-content: center;
        transform: initial !important
    }

    #l-slide .l-embla-content {
        height: clamp(460px, calc(600/1536*100vw), 60vh)
    }
}

@media (min-width:1024px) {
    #l-services .l-embla-content {
        max-width: 400px
    }

    #thumb-carousel .l-embla-content img:hover {
        opacity: 1
    }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
